image_input = keras.Input(shape=(None, 120, 160, 3))

c3d_mp = keras.Sequential([
    keras.layers.Conv3D(4,(2,3,3), activation='relu'),   #c3d_layer1
    keras.layers.MaxPooling3D((1,2,2)),                 #c3d_pooling1
        
    keras.layers.Conv3D(8,(4,3,3), activation='relu'),   #c3d_layer2
    keras.layers.MaxPooling3D((2,2,2)),                 #c3d_pooling2
    keras.layers.Conv3D(16,(8,3,3), activation='relu'),  #c3d_layer3
    keras.layers.MaxPooling3D((4,2,2))                  #c3d_pooling3    
])
c3d_mp_out = c3d_mp(image_input)

c3d_mp_flatten = keras.layers.Flatten()(c3d_mp_out)  
lstm1 = keras.layers.LSTM(1024, return_sequences=True)(c3d_mp_flatten)
global_rgb_feature = keras.layers.GlobalMaxPooling1D()(lstm1)

dense_1 = keras.layers.Dense(128, activation='relu')(global_rgb_feature)
soft_max = keras.layers.Dense(1, activation='sigmoid')(dense_1)    

model_rgb = keras.Model(inputs=[image_input], outputs=[soft_max])

 having the following structure i want to use the pretrained weights , but use another classification head