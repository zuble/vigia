    ## real GERADOR
    train_generator = DataGen(train_fp, train_labl, train_config, 'train')
    valdt_generator = DataGen(valdt_fp, valdt_labl, train_config, 'valdt')
    
    
    ## TF.DATA FROM GENERATOR
    '''def data_gen_wrapper(data_gen):
        for i in range(len(data_gen)):
            yield data_gen[i]
        
    output_types = (tf.float32, tf.float32)
    output_shapes = (
        tf.TensorShape((None , None , train_config["in_height"], train_config["in_width"], 3)),
        tf.TensorShape((None,))
    )
    train_dataset = tf.data.Dataset.from_generator(
        lambda: data_gen_wrapper(train_generator),
        output_types=output_types,
        output_shapes=output_shapes
    )
    valdt_dataset = tf.data.Dataset.from_generator(
        lambda: data_gen_wrapper(valdt_generator),
        output_types=output_types,
        output_shapes=output_shapes
    )'''
    
    
    ''' MODEL '''
    ## SINGLE
    model,model_name = tfh5.form_model(train_config)
    
    
    ''' FIT '''
    history = model.fit(train_generator, 
                        epochs = train_config["epochs"] ,
                        steps_per_epoch = len(train_fp) * 2,
                        
                        verbose=2,
                        
                        validation_data = valdt_generator ,
                        validation_steps = len(valdt_fp),
                        
                        use_multiprocessing = True , 
                        #workers = 8 ,
                    )